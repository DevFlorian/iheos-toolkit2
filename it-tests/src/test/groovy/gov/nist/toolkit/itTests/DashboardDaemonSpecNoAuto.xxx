package gov.nist.toolkit.itTests

import gov.nist.toolkit.actorfactory.client.SimId
import gov.nist.toolkit.adt.ListenerFactory
import gov.nist.toolkit.installation.Installation
import gov.nist.toolkit.itTests.support.ToolkitSpecification
import gov.nist.toolkit.testengine.scripts.BuildCollections
import gov.nist.toolkit.toolkitApi.SimulatorBuilder
import gov.nist.toolkit.xdstools2.scripts.DashboardDaemon
import spock.lang.Shared
/**
 *
 */
class DashboardDaemonSpecNoAuto extends ToolkitSpecification {
    @Shared SimulatorBuilder spi


    @Shared String urlRoot = String.format("http://localhost:%s/xdstools2", remoteToolkitPort)
    @Shared String patientId = 'BR14^^^&1.2.360&ISO'
    @Shared String patientId2 = 'BR15^^^&1.2.360&ISO'
    @Shared String reg = 'bill__reg'
    @Shared SimId simId = new SimId(reg)
    @Shared String testSession = 'bill';

    def setupSpec() {   // one time setup done when class launched
        startGrizzly('8889')

        // Initialize remote api for talking to toolkit on Grizzly
        // Needed to build simulators
        spi = getSimulatorApi(remoteToolkitPort)

        // local customization

        new BuildCollections().init(null)

    }

    def cleanupSpec() {  // one time shutdown when everything is done
        server.stop()
        ListenerFactory.terminateAll()
    }

    def setup() {
        api.createTestSession(testSession)
    }

    def 'run' () {
        when:
        URL dashboardECUrl = this.class.getResource('/dashboard-external-cache/dashboard-ec-file.txt')


        then:
        dashboardECUrl

        when:
        Installation.instance().externalCache(new File(new File(dashboardECUrl.toURI()).parent))
        def ec = Installation.instance().externalCache()
        println "EC is ${ec.toString()}"
        println "Site Names - ${api.getSiteNames(true)}"


        def pid = '911^^^&1.3.6.1.4.1.21367.13.20.1000&ISO'
        def warHome = Installation.instance().warHome().toString()
        def outDir = '/home/bill/tmp/toolkit2a/Dashboard'
        def env = 'default'
        def secure = false
        DashboardDaemon dd = new DashboardDaemon(warHome, outDir, env, ec.toString())
        dd.run(pid, secure)

        then:
        true
    }
}
